SIGNAL void testCaseR(int seed) {
  int pos;
  int i, j;
  int lastPulsePinValue;
  int at_floor;
	int reached1;
	int reached2;
	int reached3;
  int random_variable;
	int delay;
	int door_delay;
	int doors_open;
	int counter;
	int second_counter;
	int door_counter;
	int stop_counter;
	int stop_delay;
	int stop_pressed;

  pos = 0;
	reached1 = 0;
	reached2 = 0;
	reached3 = 0;
	doors_open = 1;
	door_delay = 400;
	counter = 0;
	second_counter = 400;
	delay = 0;
	door_counter = 0;
	stop_counter = 0;
	stop_delay = 0;
	stop_pressed = 0;
	
	rand(seed);

  // start the test
  for (;;) {
    at_floor = 0;
		
		if (counter >= delay)
		{
			random_variable = rand(0) % 91;
		
			// very likely to toggle floor button, unlikely to toggle stop button
			// buttons toggled in random event so we don't have to bother with resetting
			if (random_variable <= 29)
			{
				printf("Toggled button 1\n");
				PORTC ^= 1;
			}
			else if (random_variable <= 59)
			{
				printf("Toggled button 2\n");
				PORTC ^= 2;
			}
			else if (random_variable <= 89)
			{
				printf("Toggled button 3\n");
				PORTC ^= 4;
			}
			else
			{
				printf("Pressed stop button\n");
				PORTC |= 8;
				// stop pressed, so start the counter for the stop button release
				stop_counter = 0;
				stop_delay = 400 + rand(0) % 1200;
				printf("Stop button delay: %d\n", stop_delay);
				stop_pressed = 1;
			}
			// reset counter and get new delay
			counter = 0;
			delay = rand(0) % 4000;
			printf("Delay: %d\n", delay);
		}
		else
			counter++;

		// make sure the stop button is released in a timely manner
		if (stop_pressed)
		{
			if (stop_counter >= stop_delay)
			{
				printf("Released stop button\n");
				PORTC ^= 8;
				stop_pressed = 0;
			}
			else
				stop_counter++;
		}
		
    // every second, check whether we are at a floor
		if (second_counter >= 400)
		{
			if ((PORTC & (1 << 7)) && !TIM3_CCR1 && !TIM3_CCR2) 
			{
				if (pos >= -1 && pos <= 1) {
					// reached floor 1
					if (!reached1)
					{
						reached1 = 1;
						printf("Arrived at floor 1\n");
						at_floor = 1;
					}
				}
				else
					reached1 = 0;
			
				if (pos >= 399 && pos <= 401) {
					// reached floor 2
					if (!reached2)
					{
						reached2 = 1;
						printf("Arrived at floor 2\n");
						at_floor = 1;
					}
				}
				else
					reached2 = 0;
			
				if (pos >= 799 && pos <= 801) {
					// reached floor 3
					if (!reached3)
					{
						reached3 = 1;
						printf("Arrived at floor 3\n");
						at_floor = 1;
					}
				}
				else
					reached3 = 0;
			}
			second_counter = 0;
		}
		else
			second_counter++;

    // if we have stopped at a floor, we open the doors
		if (at_floor && !doors_open)
		{
      PORTC ^= 1 << 8;
			doors_open = 1;
			// start the counter for closing the doors
			door_delay = 400 + (rand(0) % 800);
			door_counter = 0;
			printf("Opening doors. Door delay: %d\n", door_delay);
		}
		
		// if the doors have opened, close them after a delay
		if (doors_open)
		{
			if (door_counter >= door_delay)
			{
				printf("Closing doors.\n");
				doors_open = 0;
				PORTC |= 1 << 8;
			}
			else
				door_counter++;
		}
		
		// keep track of elevator position
		if (lastPulsePinValue < (PORTC & (1 << 9))) 
		{
			if (TIM3_CCR1) pos += 1;
			if (TIM3_CCR2) pos -= 1;
    }
    lastPulsePinValue = PORTC & (1 << 9);
    swatch(0.0025);
  }

}